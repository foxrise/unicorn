@import "varible.scss"
@import "mixin.scss"
@each $name, $align in $clearLists {
  .clear-#{$name} {
    clear: $align;
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-clear-#{$name} {
        clear: $align;
      }
    }
  }
}
@each $name, $align in $verticalAlignLists {
  .vertical-align-#{$name} {
    vertical-align: $align;
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-vertical-align-#{$name} {
        vertical-align: $align;
      }
    }
  }
}
@each $name, $display in $displayLists {
  .display-#{$name} {
    display: $display
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-display-#{$name} {
        display: $display
      }
    }
  }
}
@each $name, $borderSize in $borderWidthLists {
  .bd-white-#{$name} {
    border: $borderSize solid white;
  }
  .bd-grey-#{$name} {
    border: $borderSize solid grey;
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-bd-white-#{$name} {
        border: $borderSize solid white;
      }
      .#{$breakpointsName}-bd-grey-#{$name} {
          border: $borderSize solid grey;
      }
     }
  }
}
@each $name, $scale in $scaleTransformLists {
  .scale-#{$name} {
    transform: $scale
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-scale-#{$name} {
        transform: $scale
      }
    }
  }
}
@each $name, $rotate in $rotateTransformLists {
  .rotate-#{$name} {
    transform: $rotate
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-rotate-#{$name} {
        transform: $rotate
      }
    }
  }
}
@each $name, $blur in $backdropBlurLists {
  .backdrop-blur-#{$name} {
    backdrop-filter: $blur;
  }
  .blur-#{$name} {
    filter: $blur;
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-backdrop-blur-#{$name} {
        backdrop-filter: $blur;
      }
      .#{$breakpointsName}-blur-#{$name} {
        filter: $blur;
      }
    }
  }
}
@each $name, $brightness in $backdropBrightnessLists {
  .backdrop-brightness-#{$name} {
    backdrop-filter: $brightness;
  }
  .brightness-#{$name} {
    filter: $brightness;
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-backdrop-brightness-#{$name} {
        backdrop-filter: $brightness;
      }
      .#{$breakpointsName}-brightness-#{$name} {
        filter: $brightness;
      }
    }
  }
}
@each $name, $color in $colorLists {
  //SVG
  .fill-#{$name} {                      // FILL FOR SVG
    fill: $color;
  }
  .fill-hover-#{$name} {
    fill: $color;
  }
  .stroke-#{$name} { 
    stroke: $color;
  }

  //NORMAL
  .accent-#{$name} {    //FORM COLOR
    accent-color: $color;
  }
  .caret-#{$name} {     //FORM COLOR
    caret-color: $color;
  }
  .bg-c-#{$name} {
    background-color: $color;
  }
  .bg-c-hover-#{$name}:hover {
    background-color: $color;
  }
  .bg-#{$name} {
    background: $color;
  }
  .bg-hover-#{$name}:hover {
    background: $color;
  }
  .color-#{$name} {
    color: $color;
  }
  .color-hover-#{$name}:hover {
    color: $color;
  }
  .t-decoration-color-#{$name} {
    text-decoration-color: $color;
  }
  .bd-color-#{$name} {
    border-color: $color;
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-fill-#{$name} {                      // FILL FOR SVG
        fill: $color;
      }
      .#{$breakpointsName}-fill-hover-#{$name} {
        fill: $color;
      }
      .#{$breakpointsName}-stroke-#{$name} { 
        stroke: $color;
      }
    
      //NORMAL
      .#{$breakpointsName}-accent-#{$name} {    //FORM COLOR
        accent-color: $color;
      }
      .#{$breakpointsName}-caret-#{$name} {     //FORM COLOR
        caret-color: $color;
      }
      .#{$breakpointsName}-bg-c-#{$name} {
        background-color: $color;
      }
      .#{$breakpointsName}-bg-c-hover-#{$name}:hover {
        background-color: $color;
      }
      .#{$breakpointsName}-bg-#{$name} {
        background: $color;
      }
      .#{$breakpointsName}-bg-hover-#{$name}:hover {
        background: $color;
      }
      .#{$breakpointsName}-color-#{$name} {
        color: $color;
      }
      .#{$breakpointsName}-color-hover-#{$name}:hover {
        color: $color;
      }
      .#{$breakpointsName}-t-decoration-color-#{$name} {
        text-decoration-color: $color;
      }
      .#{$breakpointsName}-bd-color-#{$name} {
        border-color: $color;
      }
    }
  }
}
@each $name, $shadow in $dropShadowLists {
  .drop-shadow-#{$name} {
    filter: $shadow;
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-drop-shadow-#{$name} {
        filter: $shadow;
      }
    }
  }
}
@each $name, $position in $textTransformLists {
  .t-transform-#{$name} {
    text-transform: $position;
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-t-transform-#{$name} {
        text-transform: $position;
      }
    }
  }
}
@each $name, $position in $textTransformLists {             //TRUNCATE
  .t-truncate-#{$name} {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-t-truncate-#{$name} {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
      }
    }
  }
}
@each $name, $whiteSpace in $whiteSpaceLists {
  .white-space-#{$name} {
    white-space: $whiteSpace;
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-white-space-#{$name} {
        white-space: $whiteSpace;
      }
    }
  }
}
@each $name, $position in $positionLists {
  .pos-#{$name} {
    position: $position;
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-pos-#{$name} {
        position: $position;
      }
    }
  }
}
@each $name, $borderWidth in $borderWidthLists {
  .bd-w-#{$name} {
    border-width: $borderWidth;
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-bd-w-#{$name} {
        border-width: $borderWidth;
      }
    }
  }
}
@each $name, $align in $alignLists {
  .ta-#{$name} {
    text-align: $align;
  }
  .float-#{$name} {
    float: $align;
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-ta-#{$name} {
        text-align: $align;
      }
      .#{$breakpointsName}-float-#{$name} {
        float: $align;
      }
    }
  }
}
@each $name, $weight in $fontWeightLists {
  .fw-#{$name} {
    font-weight: $weight;
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-fw-#{$name} {
        font-weight: $weight;
      }
    }
  }
}
@each $name, $size in $sizeLists {
  .fs-#{$name} {
    font-size: $size;
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-fs-#{$name} {
        font-size: $size;
      }
    }
  }
}

@each $name, $range in $rangeLists {
  .opacity-#{$name} {
    opacity: $range / 100;
  }
  .opacity-hover-#{$name}:hover {
    opacity: $range / 100;
  }
  .bd-r-#{$name} {
    border-radius: $range + px;
  }
  .bd-r-hover-#{$name}:hover {
    border-radius: $range + px;
  }
  .z-index-#{$name} {
    z-index: $range;
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-opacity-#{$name} {
        opacity: $range / 100;
      }
      .#{$breakpointsName}-opacity-hover-#{$name}:hover {
        opacity: $range / 100;
      }
      .#{$breakpointsName}-bd-r-#{$name} {
        border-radius: $range + px;
      }
      .#{$breakpointsName}-bd-r-hover-#{$name}:hover {
        border-radius: $range + px;
      }
      .#{$breakpointsName}-z-index-#{$name} {
        z-index: $range;
      }
    }
  }
}
@each $name, $range in $rangeListsTwo {
  .w-#{$name} {
    width: $range;
  }
  .h-#{$name} {
    height: $range;
  }
  .min-w-#{$name} {
    min-width: $range;
  }
  .max-w-#{$name} {
    max-width: $range;
  }
  .min-h-#{$name} {
    min-height: $range;
  }
  .max-h-#{$name} {
    max-height: $range;
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-w-#{$name} {
        width: $range;
      }
      .#{$breakpointsName}-h-#{$name} {
        height: $range;
      }
      .#{$breakpointsName}-min-w-#{$name} {
        min-width: $range;
      }
      .#{$breakpointsName}-max-w-#{$name} {
        max-width: $range;
      }
      .#{$breakpointsName}-min-h-#{$name} {
        min-height: $range;
      }
      .#{$breakpointsName}-max-h-#{$name} {
        max-height: $range;
      }
    }
  }
}
@each $name, $time in $timeScaleLists {
  .delay-hover-#{$name}:hover {
    transition-delay: $time;
  }
  .transition-hover-#{$name}:hover {
    transition: $time ;
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-delay-hover-#{$name}:hover {
        transition-delay: $time;
      }
      .#{$breakpointsName}-transition-hover-#{$name}:hover {
        transition: $time ;
      }
    }
  }
}
@each $name, $container in $containerScaleLists {
  .container-#{$name} {
    max-width: $container;
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-container-#{$name} {
        max-width: $container;
      }
    }
  }
}
@each $name, $column in $columnScaleLists {
  .col-#{$name} {
    float: left;
    columns: $column;
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-col-#{$name} {
        float: left;
        columns: $column;
      }
    }
  }
}
@each $name, $padding in $remLists {
  //PADDING
  .pd-#{$name} {
    padding: $padding;
  }
  .pd-l-#{$name} {
    padding-left: $padding;
  }
  .pd-r-#{$name} {
    padding-right: $padding;
  }
  .pd-t-#{$name} {
    padding-top: $padding;
  }
  .pd-b-#{$name} {
    padding-bottom: $padding;
  }
  .pd-horizontal-#{$name} {  //HORIZONTAL PADDING
    padding-left: $padding;
    padding-right: $padding;
  }
  .pd-vertical-#{$name} {  //VERTICAL PADDING
    padding-top: $padding;
    padding-bottom: $padding;
  }

  //MARGIN
  
  .mg-#{$name} {
    margin: $padding;
  }
  .mg-l-#{$name} {
    margin-left: $padding;
  }
  .mg-r-#{$name} {
    margin-right: $padding;
  }
  .mg-t-#{$name} {
    margin-top: $padding;
  }
  .mg-b-#{$name} {
    margin-bottom: $padding;
  }
  .mg-horizontal-#{$name} {  //HORIZONTAL MARGIN 
    margin-left: $padding;
    margin-right: $padding;
  }
  .mg-vertical-#{$name} {  //VERTICAL MARGIN 
    margin-top: $padding;
    margin-bottom: $padding;
  }

  //SPACE BETWEEN
  .space-top-#{$name} {
    margin-top: $padding;
  }
  .space-left-#{$name} {
    margin-left: $padding;
  }

  //OR
  .space-t-#{$name} {
    margin-top: $padding;
  }
  .space-l-#{$name} {
    margin-left: $padding;
  }

  // Text Indent
  .indent-#{$name} {
    text-indent: $padding;
  }
  .left-#{$name} {
    left: $padding
  }
  .right-#{$name} {
    right: $padding
  }
  .bottom-#{$name} {
    bottom: $padding
  }
  .top-#{$name} {
    top: $padding
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-pd-#{$name} {
        padding: $padding;
      }
      .#{$breakpointsName}-pd-l-#{$name} {
        padding-left: $padding;
      }
      .#{$breakpointsName}-pd-r-#{$name} {
        padding-right: $padding;
      }
      .#{$breakpointsName}-pd-t-#{$name} {
        padding-top: $padding;
      }
      .#{$breakpointsName}-pd-b-#{$name} {
        padding-bottom: $padding;
      }
      .#{$breakpointsName}-pd-horizontal-#{$name} {  //HORIZONTAL PADDING
        padding-left: $padding;
        padding-right: $padding;
      }
      .#{$breakpointsName}-pd-vertical-#{$name} {  //VERTICAL PADDING
        padding-top: $padding;
        padding-bottom: $padding;
      }
    
      //MARGIN
      
      .#{$breakpointsName}-mg-#{$name} {
        margin: $padding;
      }
      .#{$breakpointsName}-mg-l-#{$name} {
        margin-left: $padding;
      }
      .#{$breakpointsName}-mg-r-#{$name} {
        margin-right: $padding;
      }
      .#{$breakpointsName}-mg-t-#{$name} {
        margin-top: $padding;
      }
      .#{$breakpointsName}-mg-b-#{$name} {
        margin-bottom: $padding;
      }
      .#{$breakpointsName}-mg-horizontal-#{$name} {  //HORIZONTAL MARGIN 
        margin-left: $padding;
        margin-right: $padding;
      }
      .#{$breakpointsName}-mg-vertical-#{$name} {  //VERTICAL MARGIN 
        margin-top: $padding;
        margin-bottom: $padding;
      }
    
      //SPACE BETWEEN
      .#{$breakpointsName}-space-top-#{$name} {
        margin-top: $padding;
      }
      .#{$breakpointsName}-space-left-#{$name} {
        margin-left: $padding;
      }
    
      //OR
      .#{$breakpointsName}-space-t-#{$name} {
        margin-top: $padding;
      }
      .#{$breakpointsName}-space-l-#{$name} {
        margin-left: $padding;
      }
    
      // Text Indent
      .#{$breakpointsName}-indent-#{$name} {
        text-indent: $padding;
      }
      .#{$breakpointsName}-left-#{$name} {
        left: $padding
      }
      .#{$breakpointsName}-right-#{$name} {
        right: $padding
      }
      .#{$breakpointsName}-bottom-#{$name} {
        bottom: $padding
      }
      .#{$breakpointsName}-top-#{$name} {
        top: $padding
      }
    }
  }
}
@each $name, $select in $userSelectLists {
  .select-#{$select} {
    user-select: $select;
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-select-#{$select} {
        user-select: $select;
      }
    }
  }
}
@each $name, $text in $textDecorationLists {
  .t-decoration-#{$name} {
    text-decoration: $text;
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-t-decoration-#{$name} {
        text-decoration: $text;
      }
    }
  }
}
@each $name, $overflow in $overFlowLists {
  .overflow-#{$name} {
    overflow: $overflow;
  }
  .overflow-x-#{$name} {
    overflow-x: $overflow;
  }
  .overflow-y-#{$name} {
    overflow-y: $overflow;
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-overflow-#{$name} {
        overflow: $overflow;
      }
      .#{$breakpointsName}-overflow-x-#{$name} {
        overflow-x: $overflow;
      }
      .#{$breakpointsName}-overflow-y-#{$name} {
        overflow-y: $overflow;
      }
    }
  }
}
@each $name, $column in $columnRowLists {
  .grid {
    display: grid;
    grid-template-columns: auto auto auto;
  }
  .grid-col-#{$name} {
    grid-template-columns: repeat($column, minmax(0, 1fr));
  }
  .grid-col-none {
    grid-template-columns: none;
  }
  .grid-col-auto {
    grid-column: auto;
  }
  .grid-col-span-#{$name} {
    grid-column: span $column / span $column;
  }
  .grid-col-span-full {
    grid-column: 1 / -1;
  }
  .grid-col-end-#{$name} {
    grid-column-end: $column;
  }
  .grid-col-end-auto {
    grid-column-end: auto;
  }
  .grid-row-#{$name} {
    grid-template-rows: repeat($column, minmax(0, 1fr));
  }
  .grid-row-none {
    grid-template-rows: none;
  }
  .grid-row-auto {
    grid-row: auto;
  }
  .grid-row-span-#{$name} {
    grid-row: span $column / span $column;
  }
  .order-#{$name} {
    order: $column
  }
  .order-none {
    order: none;
  }
  .order-first {
    order: -9999;
  }
  .order-last {
    order: 9999;
  }
  @each $breakpointsName,$width in $breakpoints {
    @include breakpointsMixin($width) {
      .#{$breakpointsName}-grid-col-#{$name} {
        grid-template-columns: $column;
      }
      .#{$breakpointsName}-grid-col-none {
        grid-template-columns: none;
      }
      .#{$breakpointsName}-grid-col-auto {
        grid-column: auto;
      }
      .#{$breakpointsName}-grid-col-span-#{$name} {
        grid-column: span $column / span $column;
      }
      .#{$breakpointsName}-grid-col-span-full {
        grid-column: 1 / -1;
      }
      .#{$breakpointsName}-grid-col-end-#{$name} {
        grid-column-end: $column;
      }
      .#{$breakpointsName}-grid-col-end-auto {
        grid-column-end: auto;
      }
      .#{$breakpointsName}-grid-row-#{$name} {
        grid-template-rows: repeat($column, minmax(0, 1fr));
      }
      .#{$breakpointsName}-grid-row-none {
        grid-template-rows: none;
      }
      .#{$breakpointsName}-grid-row-auto {
        grid-row: auto;
      }
      .#{$breakpointsName}-grid-row-span-#{$name} {
        grid-row: span $column / span $column;
      }
      .#{$breakpointsName}-order-#{$name} {
        order: $column
      }
      .#{$breakpointsName}-order-none {
        order: none;
      }
      .#{$breakpointsName}-order-first {
        order: -9999;
      }
      .#{$breakpointsName}-order-last {
        order: 9999;
      }
      .#{$breakpointsName}-grid {
        display: grid;
        grid-template-columns: auto auto auto;
      }
    }
  }
}
.col {
  float:left;
  columns: 1;
}

.container {
  width:100%;
}

.primary-font {
  font-family: $primary-font;
}
.font-italic {
  font-style: italic;
}
.font-normal {
  font-style: normal;
}
.alerts {
  position: fixed;
  bottom:2rem;
  z-index: 1010;
  background-color: lightblue;
  padding: 1rem;
  width:90%;
  .a-bold {
    font-weight: bold;
  }
  .a-text {
    font-weight: normal;
  }
  .a-link {
    font-weight: bold;
    text-decoration: underline;
  }
}
.btn {
  border-radius: 5px;
  padding: .5rem;
  height:auto;
  display: inline-block;
  &:disabled,
  &.disabled,
  fieldset:disabled & {
    pointer-events: none;
    opacity: 0.3;
    @each $name, $color in $colorLists {
      .disabled-color-#{$name} {
        color:$color;
      }
      .disabled-bg-#{$name} {
        background-color:$color;
      }
    }
  }
}

.card {
  max-width:740px;

  .c-image {
    height: 350px;
    width: 100%;
  }
  .c-body {
    padding: 1rem;
    width:100%;
    .c-title {
      font-size: 26px;
      line-height:5px;
    }
    .c-subTitle {
      font-size: 22px;
      color: grey;
      line-height:0px;
    }
    .c-text {
      font-size: 18px;
      line-height:0px;
    }
  }
  .c-footer {
    padding: 1rem;
    min-height: 0px;
    width:100%
  }
}
@each $breakpointsName,$width in $breakpoints {
  @include breakpointsMixin($width) {
    .#{$breakpointsName}-card {
      max-width:740px;
    
      .c-image {
        height: 350px;
        width: 100%;
      }
      .c-image- {
        height: 350px;
        width: 100%;
      }
      .c-body {
        padding: 1rem;
        width:100%;
        .c-title {
          font-size: 26px;
          line-height:5px;
        }
        .c-subTitle {
          font-size: 22px;
          color: grey;
          line-height:0px;
        }
        .c-text {
          font-size: 18px;
          line-height:0px;
        }
      }
      .c-footer {
        padding: 1rem;
        min-height: 0px;
        width:100%
      }
    }
  }
}
.figure {
  height: auto;
  width: auto;
  .figure-caption {
    color:gray;
  }
}
.table-auto {
  table-layout: auto;
}
.table-fixed {
  table-layout: fixed;
}
.center-element {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
.w-full {
  width:100%;
}
.h-full {
  height:100%;
}
.w-h-full {
  height:100%;
  width:100%;
}
.h-w-full {
  height:100%;
  width:100%;
}
.s-w-h-full {
  width:100vw;
  height:100vh;
}
.s-h-w-full {
  width:100vw;
  height:100vh;
}
.s-w-full {
  width:100vh;
}
.s-h-full {
  height:100vh;
}

